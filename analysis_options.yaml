# This file configures the analyzer, which statically analyzes Dart code to
# check for errors, warnings, and lints.
#
# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
# invoked from the command line by running `flutter analyze`.

# The following line activates a set of recommended lints for Flutter apps,
# packages, and plugins designed to encourage good coding practices.
analyzer:
  errors:
    always_declare_return_types: ignore
    always_put_control_body_on_new_line: ignore
    always_put_required_named_parameters_first: ignore
    always_specify_types: ignore
    annotate_overrides: ignore
    avoid_annotating_with_dynamic: ignore
    avoid_empty_else: ignore
    avoid_init_to_null: ignore
    avoid_print: ignore
    avoid_returning_null: ignore
    avoid_returning_null_for_future: ignore
    avoid_returning_null_for_void: ignore
    avoid_setters_without_getters: ignore
    camel_case_extensions: ignore
    camel_case_types: ignore
    constant_identifier_names: ignore
    control_flow_in_finally: ignore
    curly_braces_in_flow_control_structures: ignore
    empty_catches: ignore
    empty_constructor_bodies: ignore
    empty_statements: ignore
    file_names: ignore
    hash_and_equals: ignore
    implementation_imports: ignore
    library_names: ignore
    library_prefixes: ignore
    non_constant_identifier_names: ignore
    null_closures: ignore
    omit_local_variable_types: ignore
    one_member_abstracts: ignore
    overridden_fields: ignore
    package_api_docs: ignore
    parameter_assignments: ignore
    prefer_const_constructors: ignore
    prefer_final_fields: ignore
    prefer_generic_function_type_aliases: ignore
    slash_for_doc_comments: ignore
    sort_constructors_first: ignore
    sort_unnamed_constructors_first: ignore
    type_init_formals: ignore
    unnecessary_brace_in_string_interps: ignore
    unnecessary_getters_setters: ignore
    unnecessary_new: ignore
    unnecessary_null_checks: ignore
    unnecessary_this: ignore
    use_build_context_synchronously: ignore
    use_key_in_widget_constructors: ignore
    prefer_const_literals_to_create_immutables: ignore
    unused_import: ignore
    unused_local_variable: ignore
    unused_field: ignore
    await_only_futures: ignore
    dead_code: ignore
    invalid_assignment: ignore
    missing_required_param: ignore
    missing_return: ignore
    must_be_immutable: ignore
    prefer_typing_uninitialized_variables: ignore
    todo: ignore
    unused_element: ignore
    unnecessary_null_comparison: ignore

include: package:flutter_lints/flutter.yaml

linter:
  # The lint rules applied to this project can be customized in the
  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
  # included above or to enable additional rules. A list of all available lints
  # and their documentation is published at https://dart.dev/lints.
  #
  # Instead of disabling a lint rule for the entire project in the
  # section below, it can also be suppressed for a single line of code
  # or a specific dart file by using the `// ignore: name_of_lint` and
  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
  # producing the lint.
  rules:
    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule
    unnecessary_string_escapes: false

# Additional information about this file can be found at
# https://dart.dev/guides/language/analysis-options